{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
      <div class="inner-header">
        <div class="container">
          <h1>{{ label }}</h1>
          <h2 class="white">{{ content['field_page_caption'] }}</h2>
        </div>
      </div>
      <div class="inner-content">
        <div class="container">
          <div class="row">
            <div class="main col-md-8">
              {% for paragraph in paragraph_content %}
                <div class="content-block">
                  <h2 id="{{ paragraph.heading_id }}" class="page-header content-header">{{ paragraph.heading }}</h2>
                  {{ paragraph.body|raw }}
                  {% if paragraph.sub_content_block|length %}
                    {% for sub_paragraph in  paragraph.sub_content_block %}
                      <h3 id="{{ sub_paragraph.sub_heading_id }}" >{{ sub_paragraph.sub_heading }}</h3>
                      {{ sub_paragraph.sub_body|raw }}
                    {% endfor %}
                  {% endif %}
                </div>
              {% endfor %}
            </div>
            <div class="complemtary col-md-4">
              <nav id="sidebar" class="sidebar hidden-print hidden-sm hidden-xs affix-top">
                <ul class="nav sidenav">
                  {% for sidebarElement in sidebar %}
                    <li class="">
                      <a href="#{{ sidebarElement.h2.id }}">{{ sidebarElement.h2.text }}</a>
                      {% if sidebarElement.h3|length %}
                        <ul class="nav">
                          {% for h3 in sidebarElement.h3 %}
                            <li>
                              <a href="#{{ h3.id }}">{{ h3.text }}</a>
                            </li>
                          {% endfor %}
                        </ul>
                      {% endif %}
                    </li>
                  {% endfor %}
                </ul>
                <a class="back-to-top" href="#top">Back to top</a>
              </nav>
            </div>
          </div>
        </div>
      </div>
